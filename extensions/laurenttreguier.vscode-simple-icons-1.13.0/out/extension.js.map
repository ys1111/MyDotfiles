{"version":3,"sources":["../webpack/bootstrap",".././source/extension.ts","../external \"fs\"","../external \"path\"","../external \"vscode\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","colorRegex","probeConfiguration","context","toggleArrows","changeIconColor","indexOf","vscode","window","showInformationMessage","then","choice","commands","executeCommand","jsonFiles","map","somethingChanged","file","changeFile","content","json","JSON","parse","conf","workspace","getConfiguration","hidesExplorerArrows","stringify","configurationPoint","color","oldColor","globalState","match","showWarningMessage","update","undefined","filePaths","path","join","filePath","originalColor","replace","dg","asAbsolutePath","Promise","resolve","fs","readFile","err","data","toString","newContent","writeFile","subscriptions","push","onDidChangeConfiguration","require"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import * as fs from 'fs';\nimport * as path from 'path';\nimport * as vscode from 'vscode';\n\nconst colorRegex = /#[0-9A-F]{6}(?![0-9A-F])/gi;\n\nexport async function activate(context: vscode.ExtensionContext) {\n    context.subscriptions.push(vscode.workspace.onDidChangeConfiguration(() => probeConfiguration(context)));\n    return await probeConfiguration(context);\n}\n\nexport async function deactivate() {\n}\n\nasync function probeConfiguration(context: vscode.ExtensionContext): Promise<void> {\n    const somethingChanged = [\n        await toggleArrows(context),\n        await changeIconColor('folder', context),\n        await changeIconColor('file', context)\n    ].indexOf(true) !== -1;\n\n    if (somethingChanged) {\n        await vscode.window.showInformationMessage('The window must be reloaded for changes to take effet', 'Reload')\n            .then(choice => choice ? vscode.commands.executeCommand('workbench.action.reloadWindow') : null);\n    }\n}\n\nasync function toggleArrows(context: vscode.ExtensionContext): Promise<boolean> {\n    const jsonFiles = ['simple', 'minimalistic'].map(name => name + '-icons.json');\n    let somethingChanged = false;\n\n    for (const file of jsonFiles) {\n        await changeFile(context, file, async content => {\n            let json = JSON.parse(content);\n            const conf = vscode.workspace.getConfiguration('simpleIcons').get('hideArrows', false);\n\n            if (json.hidesExplorerArrows === conf) {\n                return null;\n            }\n\n            somethingChanged = true;\n            json.hidesExplorerArrows = conf;\n            return JSON.stringify(json, null, 4);\n        });\n    }\n\n    return somethingChanged;\n}\n\nasync function changeIconColor(name: string, context: vscode.ExtensionContext): Promise<boolean> {\n    const configurationPoint = `simple.${name}.color`;\n    let color = vscode.workspace.getConfiguration('simpleIcons').get<string>(configurationPoint, null);\n    const oldColor = context.globalState.get<string>(configurationPoint);\n\n    if (!color) {\n        if (oldColor) {\n            color = oldColor;\n            await context.globalState.update(configurationPoint, undefined);\n        } else {\n            return false;\n        }\n    } else if (!color.match(colorRegex)) {\n        await vscode.window.showWarningMessage(`Icon color for '${name}' not in hex format, color not changed`);\n        return false;\n    }\n\n    const names = name == 'folder' ? [name, name + '.expanded'] : [name];\n    const filePaths = names.map(p => path.join('icons', 'simple-icons', p) + '.svg');\n    let somethingChanged = false;\n\n    for (const filePath of filePaths) {\n        await changeFile(context, filePath, async content => {\n            const contentMatches = content.match(colorRegex);\n            const originalColor = contentMatches[0];\n\n            if (originalColor === color) {\n                return null;\n            }\n\n            somethingChanged = true;\n\n            if (color !== oldColor) {\n                await context.globalState.update(configurationPoint, originalColor);\n            }\n\n            return content.replace(colorRegex, color);\n        });\n    }\n\n    return somethingChanged;\n}\n\nasync function changeFile(context: vscode.ExtensionContext, name: string, dg: (content: string) => Promise<string>): Promise<void> {\n    const file = context.asAbsolutePath(name);\n    const content = await new Promise<string>(resolve => fs.readFile(file, (err, data) => resolve(data.toString())));\n    const newContent = await dg(content);\n\n    if (newContent) {\n        return await new Promise<void>(resolve => fs.writeFile(file, newContent, err => resolve()));\n    }\n}\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"vscode\");"],"sourceRoot":""}